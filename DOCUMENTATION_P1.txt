*******************************************************************

 Project 1 Documentation

*******************************************************************

=====================================
 Table of Contents
=====================================

1.  Compilation

2. Known Problems

3.  Basic Usage
  a.  Client

  b.  Server

4. Client Commands

5.  Messages
  a.  General Structure

  b.  Types
    i.  INSERT
   ii.  DELETE
  iii.  GET
   iv.  TRANSMIT
    v.  GAMEOVER

  c. Error Codes


============================================
 1. Compilation
============================================

Compilation is simple. A makefile is provided for convenient
use. Simply type

make

and the program will compile. When cleaning the current directory
of files, type

make clean

and all the class files will be removed.

============================================
 2. Basic Usage
============================================

a. Client

To use the client, simply type

java Client

and the client application will start. The client establishes UDP
connections with servers and communicates with them by translating
user input into special message packets. Each time a send/receive
pair is done, the user is prompted for input at the dollar sign ($),
much as what one does in BASH. If an error occurs, or if the command
submitted to the ClientProtocol is unknown, errors will appear on the
screen.

**NOTE** The client initially is not connected to any server. The user
must first give the application an IP and port on which to connect. Please
see Section 3: Client Commands for the method in which to do this.

b. Server

To use the server, simply type

java Server [port]

and the client application will start. Note that the user may start
the server with a given port number. In fact, there are three possible
ways that the server can get a port number:

    1. Passed as argument to application;
    2. Specified in config file;
    3. Specified at 8080.

The order given indicates the preference given when determining the port.
That is, if the user passes a non valid port number (outside of the range
1024 <= port# <= 65535) via command line, the application tries to get the
port from the config file. If for some reason the config file is unable to
return the port number, the port is simply specified as 8080.

Once started, the server is self-running. It will continue operating until
a client issues a GAMEOVER packet. (See Section 3: Client Commands for more.)
Otherwise, the server will run until stopped by the user.

============================================
 3. Client Commands
============================================

The following are the commands the client can perform. This section does not
deal with the actual message packets that are sent between the client and
server. Arguments denoted in [] are optional, while those denoted in {} are
required. Finally, arguments must be typed in as the user is prompted fill in
the fields.

- set {IP} {port}

  Tells the application to use the given IP and port pair as the server
  to contact. A test ping is done to ensure that the server exists; if it does
  not, or if it does not respond within 5 seconds, an error message is printed out
  and the client's variables are not set to send to that IP/port pair.

- insert {name} {IP} {port}

  Inserts the name and IP/port pair into the server's records database.

- delete {name} [IP] [port]

  Deletes the named record from the server's records database. If the IP and
  port are specified as well, they must also match those provided in the record
  in order to delete the record.

- get {name | name regex} {IP | IP regex}
  Get searches for records in the remote server that match the inputs
  provided by the client. For the name, the user may specify an alphanumeric
  string or simply the * wildcard. For the IP address, one or all the
  subcomponents may specify numeric characters or the wildcard *. The server
  takes this information and then attempts to find records that match

- quit
  Closes the client application. The server continues to run.

- gameover
  Closes the client application AND closes the server application.

============================================
 4. Messages
============================================

a. Basic Structure

The following represent the messages between client and server during an
exchange. The basic structure of these messages is

DIRECTION COMMAND [[name] [IP:port] [args]] [{SUCCESS | ERROR code}]

where:

    1. DIRECTION = SND (for initial requests) or RCV (for acknowledgements);
    2. COMMAND = one of the commands listed later in this section;
    3. [name] [port] [args] = a name, IP/port and list of optional arguments; and
    4. {SUCCESS| ERROR code} = a status string indicating successful completion
       of the specified task or a specific error condition.

Typically, for RCV messages, there are no additional arguments; there is only the
status message. Conversely SND messages do not have status messages but will have
some sort of argument list.

b. Types of Messages

  i.  INSERT

    SND INSERT {name} {IP:port}
    RCV INSERT {SUCCESS | ERROR code}

 ii.  DELETE

    SND DELETE {name} { {IP|"null"}:{port|0} }
    RCV DELETE  {SUCCESS | ERROR code}

iii.  GET

    SND GET {nameRegex} {IPregex}
    RCV DELETE {SUCCESS | ERROR code}

    GET indicates to the server to retrieve records off the name
    and IP regular expressions entered by the user. This request does
    not actually retrieve records - a successful GET is followed by
    one or more TRANSMIT messages (see below) - but is used to see
    if records do exist.

    When the server receives a GET, it processes the regular expressions
    and then attempts to match records based off of them. If there are
    any records the server will return with SUCCESS and begin sending
    TRANSMIT messages. If there are no records a "record not found" error
    is returned.

 iv.  TRANSMIT

    SND TRANSMIT { {YAH|NAW} {name IP:port}+ }
    RCV TRANSMIT {SUCCESS | ERROR code}

    TRANSMIT messages follow a successful GET acknowledgement. name
    and IP:port fields are unused here; only the args field is needed.

    Within the args field, two types of fields exist. The first is an
    indication of whether or not the current packet is the last such packet
    of records. YAH means there are no more records, while NAW means the
    opposite. This indicates to the client whether or not all records
    have been transmitted.

    The second lists of all the records found by the server. The server
    lists the name of the record and the IP and port of the record for all
    records returned.

  v.  GAMEOVER

    SND GAMEOVER
    RCV GAMEOVER {SUCCESS | ERROR code}

    GAMEOVER tells the server to shut down in addition to the client.
    If the acknowledgement returns successfully then both client and
    server shut down. If the server is busy processing then it will
    return a SERVER_BUSY error indicating as such. In such an event
    the client will not shut down and must either try to resend the
    message or simply close itself.

c. Error Codes

There are some error codes defined that may be encountered when using the
system. The following error codes and enumerated types are defined in the
ErrorCode class:

    - 72 (FAIL_WHALE): An unexpected error occurred.

    - 404 (RECORD_NOT_FOUND): The server was unable to find a valid record.
      This message is passed in the DELETE and GET commands.

    - 777 (PACKET_EXPLODED): A packet loss was detected by the receiver.

    - 1973 (TIMEOUT): The client waited for a response from the server
      within some time frame but did not get one. Used primarily by the
      client when testing its server configuration.

    - 9876 (SERVER_BUSY): The client has indicated to the server that
      it should shut down (using the GAMEOVER message) but the server cannot
      stop because it is busy processing something.
